import java.util.Scanner
import java.lang.Math
import java.util.ArrayList

fun main(args: Array<String>) {
  println("1. Test the default constructor FreightTrain()")
  val train1:FreightTrain = FreightTrain()
  println("Printing FreightTrain():\n" + train1 + "\n")
  println("\n2. Test the constructor FreightTrain(n)")
  val emptyTrain:FreightTrain = FreightTrain(0)
  println("Printing emptyTrain (n=0):\n" + emptyTrain + "\n")
  val negativeTrain:FreightTrain = FreightTrain(-7)
  println("Printing negativeTrain (n=-7):\n" + negativeTrain + "\n")
  val trainWithFiveCars:FreightTrain = FreightTrain(5)
  println("Printing trainWithFiveCars (n=5):\n" + trainWithFiveCars + "\n")
  println("\n3. Test setCargo(String)")
  trainWithFiveCars.setCargo("gadgets")
  println("Printing trainWithFiveCars with cargo now gadgets:\n" + trainWithFiveCars + "\n")
  trainWithFiveCars.setCargo("onions")
  println("Printing trainWithFiveCars with cargo of onions (back to gizmos):\n" + trainWithFiveCars + "\n")
  println("\n4. Test fillTrain()")
  trainWithFiveCars.fillTrain()
  println("Printing trainWithFiveCars with all Boxcars full:\n" + trainWithFiveCars + "\n")
  println("\n5. Test callForRepair(n)")
  trainWithFiveCars.callForRepair(1)
  println("Printing trainWithFiveCars with second car in repair:\n" + trainWithFiveCars + "\n")
  println("\n6. Test setMultiCargo()")
  val trainWithEightCars:FreightTrain = FreightTrain(8)
  trainWithEightCars.setMultiCargo()
  println("Printing multi Cargo 8-car train:\n" + trainWithEightCars + "\n")
}

fun BoxcarMain(/*args: Array<String>*/) {
  // val scan:Scanner = Scanner(System.`in`)
  println("Testing Boxcar constructors:")
  val car1:Boxcar = Boxcar()
  println("Printing Boxcar():\n" + car1 + "\n")
  val car2:Boxcar = Boxcar("widgets", 7, false)
  println("Printing Boxcar(\"widgets\", 7, false):\n" + car2 + "\n")
  val car3:Boxcar = Boxcar("WaDGeTs", 7, true)
  println("Testing lowercase cargo and setting cargo to 0 if in repair.\n")
  println("Printing Boxcar(\"WaDGeTs\", 7, true):\n" + car3 + "\n")
  val car4:Boxcar = Boxcar("OtherStuff", 7, false)
  println("Testing cargo other than accepted values.\n")
  println("Printing Boxcar(\"OtherStuff\", 7, true):\n" + car4 + "\n")
  println("Testing callForRepair:")
  car2.callForRepair()
  println("Printing Boxcar called for repair:\n" + car2 + "\n")
  val car5:Boxcar = Boxcar("gadgets", 7, false)
  car5.loadCargo()
  println("Printing Boxcar with 8 gadgets:\n" + car5 + "\n")
  car5.loadCargo()
  car5.loadCargo()
  car5.loadCargo()
  println("Printing Boxcar with 10 gadgets, tried to overload:\n" + car5 + "\n")
  car2.loadCargo()
  println("Printing Boxcar in repair, can't load (0 cargo):\n" + car2 + "\n")
  println("Testing isFull:")
  val car6:Boxcar = Boxcar("gizmos", 10, false)
  val car7:Boxcar = Boxcar("widgets", 7, false)
  println("Printing isFull on full car:\n" + car6.isFull() + "\n")
  println("Printing isFull on non-full car:\n" + car7.isFull() + "\n")
  println("Testing getCargo:")
  println("Printing getCargo on a \"widgets\" car:\n" + car7.getCargo() + "\n")
  println("Testing setCargo:")
  car7.setCargo("gadgets")
  println("Setting cargo to gadgets:\n" + car7 + "\n")
  car7.setCargo("WADGetS")
  println("Testing lowercase conversion (WADGetS -> wadgets):\n" + car7 + "\n")
  car7.setCargo("onions")
  println("Testing invalid cargo type sets to gizmos (onions -> gizmos):\n" + car7 + "\n")
}